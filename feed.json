{
	"version": "https://jsonfeed.org/version/1",
	"title": "Jonathan Sick’s Timeline",
	"icon": "https://micro.blog/jonathansick/avatar.jpg",
	"home_page_url": "https://www.jonathansick.blog/",
	"feed_url": "https://www.jonathansick.blog/feed.json",
	"items": [
		
			{
				"id": "http://jonathansick.micro.blog/2022/07/19/the-fact-is.html",
				
				"content_html": "<blockquote>\n<p>The fact is that one of America’s two major political parties appears to be viscerally opposed to any policy that seems to serve the public good.</p>\n</blockquote>\n<p><a href=\"https://www.nytimes.com/2022/07/18/opinion/climate-politics-manchin.html\">Paul Krugman</a></p>\n",
				"content_text": "> The fact is that one of America’s two major political parties appears to be viscerally opposed to any policy that seems to serve the public good.\n\n[Paul Krugman](https://www.nytimes.com/2022/07/18/opinion/climate-politics-manchin.html)\n",
				"date_published": "2022-07-19T07:32:08-04:00",
				"url": "https://www.jonathansick.blog/2022/07/19/the-fact-is.html"
			},
			{
				"id": "http://jonathansick.micro.blog/2022/07/18/embracing-the-pyprojecttoml.html",
				"title": "Embracing the pyproject.toml future of packaging Python projects with setuptools",
				"content_html": "<p>Last week I worked on <a href=\"https://github.com/lsst/templates/tree/main/project_templates/square_pypi_package\">a new template for PyPI python projects</a> for SQuaRE, my team at Rubin Observatory.<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup> One of the banner features in this new template is that we did away with <code>setup.cfg</code> and went all-in with <code>pyproject.toml</code> for defining our projects' packaging.</p>\n<h2 id=\"peps-517-518-and-621\">PEPs 517, 518 and 621</h2>\n<p>First, a reminder of what&rsquo;s going on with Python packaging. <a href=\"https://peps.python.org/pep-0517/\">PEP 517</a> and <a href=\"https://peps.python.org/pep-0518/\">PEP 518</a> introduced the idea of a &ldquo;build-system independent format for source trees.&rdquo; Up to that point, the assumption was that all Python projects would be built with setuptools.<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\">2</a></sup> A build-system independent format lets you specify an alternative build backend, but in a standardized way, so that a front-end like <code>pip</code> can build and install the package regardless. In the SQuaRE team, though we use setuptools, we embraced PEP 517 and added <code>pyroject.toml</code> files containing a <code>[build-system]</code> table. However, our project metadata remained in <code>setup.cfg</code>, where setuptools expects it.</p>\n<p>Then in <a href=\"https://peps.python.org/pep-0621/\">PEP 621</a>, Python introduced a standardized schema for storing a project&rsquo;s metadata (everything from its name to its dependencies) in a <code>[project]</code> table of <code>project.toml</code> files. At this point, it seemed as if we could finally drop <code>setup.cfg</code> files from our projects entirely.</p>\n<p>Well, almost. The last straw was for setuptools itself to support <code>pyproject.toml</code> configurations for aspects of the build that are specific to setuptools, like package discovery. Currently, the support for a <code>[tool.setuptools]</code> table in pyproject.toml is in beta, but it exists and that was good enough for our team to start supporting it.</p>\n<p>And with that, we can now package our Python projects with only a <code>pyproject.toml</code> file, dropping <code>setup.cfg</code> and (almost) <code>setup.py</code> (more on this later).</p>\n<h2 id=\"our-template-pyprojecttoml\">Our template pyproject.toml</h2>\n<p>This is the example pyproject.toml from our template (and here&rsquo;s the related <a href=\"https://github.com/lsst/templates/blob/main/project_templates/square_pypi_package/%7B%7Bcookiecutter.pypi_name%7D%7D/pyproject.toml\">Jinja2/cookiecutter template</a> for it). You can also <a href=\"https://github.com/lsst-sqre/kafkit/blob/main/pyproject.toml\">see it in action with Kafkit</a>, one of our Python packages for Kafka.</p>\n<pre><code>[project]\n# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/\nname = &quot;example&quot;\ndescription = &quot;Short one-sentence description of the package&quot;\nlicense = {file = &quot;LICENSE&quot;}\nreadme= &quot;README.md&quot;\nkeywords = [\n    &quot;rubin&quot;,\n    &quot;lsst&quot;,\n]\n# https://pypi.org/classifiers/\nclassifiers = [\n    &quot;Development Status :: 4 - Beta&quot;,\n    &quot;License :: OSI Approved :: MIT License&quot;,\n    &quot;Programming Language :: Python&quot;,\n    &quot;Programming Language :: Python :: 3&quot;,\n    &quot;Programming Language :: Python :: 3.8&quot;,\n    &quot;Programming Language :: Python :: 3.9&quot;,\n    &quot;Programming Language :: Python :: 3.10&quot;,\n    &quot;Intended Audience :: Developers&quot;,\n    &quot;Natural Language :: English&quot;,\n    &quot;Operating System :: POSIX&quot;,\n    &quot;Typing :: Typed&quot;,\n]\nrequires-python = &quot;&gt;=3.8&quot;\ndependencies = []\ndynamic = [&quot;version&quot;]\n\n[project.optional-dependencies]\ndev = [\n    # Testing\n    &quot;coverage[toml]&quot;,\n    &quot;pytest&quot;,\n    &quot;pytest-asyncio&quot;,\n    &quot;pre-commit&quot;,\n    &quot;mypy&quot;,\n    # Documentation\n    &quot;sphinx&quot;,\n    &quot;documenteer&quot;,\n    &quot;lsst-sphinx-bootstrap-theme&quot;,\n    &quot;sphinx-prompt&quot;,\n    &quot;sphinx-automodapi&quot;,\n    &quot;myst-parser&quot;,\n    &quot;markdown-it-py[linkify]&quot;,\n]\n\n[project.urls]\n# Homepage = &quot;https://example.lsst.io&quot;\nSource = &quot;https://github.com/lsst-sqre/example&quot;\n\n[build-system]\nrequires = [\n    &quot;setuptools&gt;=61&quot;,\n    &quot;wheel&quot;,\n    &quot;setuptools_scm[toml]&gt;=6.2&quot;\n]\nbuild-backend = &quot;setuptools.build_meta&quot;\n\n[tool.setuptools_scm]\n\n[tool.setuptools.packages.find]\n# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html\nwhere = [&quot;src&quot;]\ninclude = [&quot;example*&quot;]\n\n[tool.coverage.run]\nparallel = true\nbranch = true\nsource = [&quot;example&quot;]\n\n[tool.coverage.paths]\nsource = [&quot;src&quot;, &quot;.tox/*/site-packages&quot;]\n\n[tool.coverage.report]\nshow_missing = true\nexclude_lines = [\n    &quot;pragma: no cover&quot;,\n    &quot;def __repr__&quot;,\n    &quot;if self.debug:&quot;,\n    &quot;if settings.DEBUG&quot;,\n    &quot;raise AssertionError&quot;,\n    &quot;raise NotImplementedError&quot;,\n    &quot;if 0:&quot;,\n    &quot;if __name__ == .__main__.:&quot;,\n    &quot;if TYPE_CHECKING:&quot;\n]\n\n[tool.black]\nline-length = 79\ntarget-version = [&quot;py38&quot;]\nexclude = '''\n/(\n    \\.eggs\n  | \\.git\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | _build\n  | build\n  | dist\n)/\n'\n# Use single-quoted strings so TOML treats the string like a Python r-string\n#  Multi-line strings are implicitly treated by black as regular expressions\n\n[tool.pydocstyle]\n# Reference: http://www.pydocstyle.org/en/stable/error_codes.html\nconvention = &quot;numpy&quot;\nadd_select = [\n    &quot;D212&quot; # Multi-line docstring summary should start at the first line\n]\nadd-ignore = [\n    &quot;D105&quot;, # Missing docstring in magic method\n    &quot;D102&quot;, # Missing docstring in public method (needed for docstring inheritance)\n    &quot;D100&quot;, # Missing docstring in public module\n    # Below are required to allow multi-line summaries.\n    &quot;D200&quot;, # One-line docstring should fit on one line with quotes\n    &quot;D205&quot;, # 1 blank line required between summary line and description\n    &quot;D400&quot;, # First line should end with a period\n    # Properties shouldn't be written in imperative mode. This will be fixed\n    # post 6.1.1, see https://github.com/PyCQA/pydocstyle/pull/546\n    &quot;D401&quot;,\n]\n\n[tool.isort]\nprofile = &quot;black&quot;\nline_length = 79\nknown_first_party = [&quot;example&quot;, &quot;tests&quot;]\nskip = [&quot;docs/conf.py&quot;]\n\n[tool.pytest.ini_options]\nasyncio_mode = &quot;strict&quot;\npython_files = [\n    &quot;tests/*.py&quot;,\n    &quot;tests/*/*.py&quot;\n]\n\n[tool.mypy]\ndisallow_untyped_defs = true\ndisallow_incomplete_defs = true\nignore_missing_imports = true\nstrict_equality = true\nwarn_redundant_casts = true\nwarn_unreachable = true\nwarn_unused_ignores = true\n# plugins =\n</code></pre>\n<p>This <code>pyproject.toml</code> is built for a &ldquo;src/&rdquo; Python package layout. The <code>[tool.setuptools.packages.find]</code> table is where we configure this.</p>\n<h2 id=\"setuppy-is-still-necessary-for-now\">setup.py is still necessary, for now</h2>\n<p>Our original goal with this new template was to do away with the &ldquo;legacy&rdquo; packaging files: <code>setup.cfg</code> and <code>setup.py</code>. We did succeed in doing away with <code>setup.cfg</code> since not only has <code>setuptools</code> moved to <code>pyproject.toml</code>, but nearly every other tool using <code>setup.cfg</code> has moved their configurations as well.<sup id=\"fnref:3\"><a href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\">3</a></sup></p>\n<p>It might seem like <code>setup.py</code> is also obsolete. However, in our experience, some projects still require it for editable installs <code>pip install -e .</code>. We often use editable installs during development to rapidly test and prototype, so this is a useful feature for us. For that reason, we&rsquo;ve had to re-add a basic <code>setup.py</code> file to our projects:</p>\n<pre><code>from setuptools import setup\n\nsetup()\n</code></pre>\n<p>What&rsquo;s surprising is that, anecdotally, not all setuptools-based projects seem to need a <code>setup.py</code> for their editable installs.</p>\n<p>Regardless, <a href=\"https://github.com/pypa/setuptools/issues/2816\">setuptools issue 2816</a> is worth a subscription to learn when this has changed.</p>\n<h2 id=\"concatenated-readmes-with-markdown-may-not-work\">Concatenated READMEs with Markdown may not work</h2>\n<p>With the new <code>[project]</code> table in <code>pyproject.toml</code>, you can set a <code>readme</code> field that links to your project&rsquo;s README file. This effectively replaces the old &ldquo;long description&rdquo; field, where, back in the <code>setup.py</code> days, we&rsquo;d write a small function to open and insert text from the README file. This is a nice, clean way of standardizing that practice.</p>\n<p>Something I liked to do in our <code>setup.cfg</code> files was to actually concatenated multiple files into the long description:</p>\n<pre><code>[metadata]\nname = documenteer\nlong_description = file: README.rst, CHANGELOG.rst, LICENSE\nlong_description_content_type = text/x-rst\n</code></pre>\n<p>This way, the project&rsquo;s page on PyPI would include not only the README but also the change log, followed by the license. Nice.</p>\n<p>In <code>pyproject.toml</code>, the same can be accomplished by making the README <em>dynamic</em>:</p>\n<pre><code>[project]\ndynamic = [&quot;readme&quot;]\n\n[tool.setuptools.dynamic]\nreadme = {file = [&quot;README.rst&quot;, &quot;CHANGELOG.rst&quot;]}\n</code></pre>\n<p>And this works. Where things went wrong for me is using Markdown for the README and CHANGELOG:</p>\n<pre><code>[project]\ndynamic = [&quot;readme&quot;]\n\n[tool.setuptools.dynamic]\nreadme = {file = [&quot;README.md&quot;, &quot;CHANGELOG.md&quot;]}\n</code></pre>\n<p>When I looked inside the built wheel&rsquo;s <code>METADATA</code> file, the <code>Description-Content-Type</code> would be <code>text/re-structured-text</code> instead of <code>text/markdown</code>. Normally, the tooling successfully detects the content type for the description, but this may not be working for dynamic READMEs. Something to be aware of, as setuptools' <code>pyproject.toml</code> support is being developed.</p>\n<h2 id=\"further-reading\">Further reading</h2>\n<ul>\n<li><a href=\"https://packaging.python.org/en/latest/specifications/declaring-project-metadata/\">PyPA&rsquo;s documentation for declaring project metadata in pyproject.toml</a></li>\n<li><a href=\"https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html\">setuptools' documentation for pyproject.toml configuration</a></li>\n</ul>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p><a href=\"https://github.com/lsst/templates\">We love to create templates</a> because they enable us to standardize on technologies and workflows. Even though we have tens/hundreds of GitHub repositories at Rubin (depending on the organizational scope), working in these projects is familiar because they all share the same structure and technologies.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:2\" role=\"doc-endnote\">\n<p>Like distutils and packaging — remember thee?&#160;<a href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:3\" role=\"doc-endnote\">\n<p>Except flake8 — so we&rsquo;ve booted flake8 to its own <code>.flake8</code> configuration file.&#160;<a href=\"#fnref:3\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "Last week I worked on [a new template for PyPI python projects](https://github.com/lsst/templates/tree/main/project_templates/square_pypi_package) for SQuaRE, my team at Rubin Observatory.[^1] One of the banner features in this new template is that we did away with `setup.cfg` and went all-in with `pyproject.toml` for defining our projects' packaging.\n\n## PEPs 517, 518 and 621\nFirst, a reminder of what's going on with Python packaging. [PEP 517](https://peps.python.org/pep-0517/) and [PEP 518](https://peps.python.org/pep-0518/) introduced the idea of a \"build-system independent format for source trees.\" Up to that point, the assumption was that all Python projects would be built with setuptools.[^2] A build-system independent format lets you specify an alternative build backend, but in a standardized way, so that a front-end like `pip` can build and install the package regardless. In the SQuaRE team, though we use setuptools, we embraced PEP 517 and added `pyroject.toml` files containing a `[build-system]` table. However, our project metadata remained in `setup.cfg`, where setuptools expects it.\n\nThen in [PEP 621](https://peps.python.org/pep-0621/), Python introduced a standardized schema for storing a project's metadata (everything from its name to its dependencies) in a `[project]` table of `project.toml` files. At this point, it seemed as if we could finally drop `setup.cfg` files from our projects entirely.\n\nWell, almost. The last straw was for setuptools itself to support `pyproject.toml` configurations for aspects of the build that are specific to setuptools, like package discovery. Currently, the support for a `[tool.setuptools]` table in pyproject.toml is in beta, but it exists and that was good enough for our team to start supporting it.\n\nAnd with that, we can now package our Python projects with only a `pyproject.toml` file, dropping `setup.cfg` and (almost) `setup.py` (more on this later).\n\n## Our template pyproject.toml\nThis is the example pyproject.toml from our template (and here's the related [Jinja2/cookiecutter template](https://github.com/lsst/templates/blob/main/project_templates/square_pypi_package/%7B%7Bcookiecutter.pypi_name%7D%7D/pyproject.toml) for it). You can also [see it in action with Kafkit](https://github.com/lsst-sqre/kafkit/blob/main/pyproject.toml), one of our Python packages for Kafka.\n\n\t[project]\n\t# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/\n\tname = \"example\"\n\tdescription = \"Short one-sentence description of the package\"\n\tlicense = {file = \"LICENSE\"}\n\treadme= \"README.md\"\n\tkeywords = [\n\t    \"rubin\",\n\t    \"lsst\",\n\t]\n\t# https://pypi.org/classifiers/\n\tclassifiers = [\n\t    \"Development Status :: 4 - Beta\",\n\t    \"License :: OSI Approved :: MIT License\",\n\t    \"Programming Language :: Python\",\n\t    \"Programming Language :: Python :: 3\",\n\t    \"Programming Language :: Python :: 3.8\",\n\t    \"Programming Language :: Python :: 3.9\",\n\t    \"Programming Language :: Python :: 3.10\",\n\t    \"Intended Audience :: Developers\",\n\t    \"Natural Language :: English\",\n\t    \"Operating System :: POSIX\",\n\t    \"Typing :: Typed\",\n\t]\n\trequires-python = \">=3.8\"\n\tdependencies = []\n\tdynamic = [\"version\"]\n\t\n\t[project.optional-dependencies]\n\tdev = [\n\t    # Testing\n\t    \"coverage[toml]\",\n\t    \"pytest\",\n\t    \"pytest-asyncio\",\n\t    \"pre-commit\",\n\t    \"mypy\",\n\t    # Documentation\n\t    \"sphinx\",\n\t    \"documenteer\",\n\t    \"lsst-sphinx-bootstrap-theme\",\n\t    \"sphinx-prompt\",\n\t    \"sphinx-automodapi\",\n\t    \"myst-parser\",\n\t    \"markdown-it-py[linkify]\",\n\t]\n\t\n\t[project.urls]\n\t# Homepage = \"https://example.lsst.io\"\n\tSource = \"https://github.com/lsst-sqre/example\"\n\t\n\t[build-system]\n\trequires = [\n\t    \"setuptools>=61\",\n\t    \"wheel\",\n\t    \"setuptools_scm[toml]>=6.2\"\n\t]\n\tbuild-backend = \"setuptools.build_meta\"\n\t\n\t[tool.setuptools_scm]\n\t\n\t[tool.setuptools.packages.find]\n\t# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html\n\twhere = [\"src\"]\n\tinclude = [\"example*\"]\n\t\n\t[tool.coverage.run]\n\tparallel = true\n\tbranch = true\n\tsource = [\"example\"]\n\t\n\t[tool.coverage.paths]\n\tsource = [\"src\", \".tox/*/site-packages\"]\n\t\n\t[tool.coverage.report]\n\tshow_missing = true\n\texclude_lines = [\n\t    \"pragma: no cover\",\n\t    \"def __repr__\",\n\t    \"if self.debug:\",\n\t    \"if settings.DEBUG\",\n\t    \"raise AssertionError\",\n\t    \"raise NotImplementedError\",\n\t    \"if 0:\",\n\t    \"if __name__ == .__main__.:\",\n\t    \"if TYPE_CHECKING:\"\n\t]\n\t\n\t[tool.black]\n\tline-length = 79\n\ttarget-version = [\"py38\"]\n\texclude = '''\n\t/(\n\t    \\.eggs\n\t  | \\.git\n\t  | \\.mypy_cache\n\t  | \\.tox\n\t  | \\.venv\n\t  | _build\n\t  | build\n\t  | dist\n\t)/\n\t'\n\t# Use single-quoted strings so TOML treats the string like a Python r-string\n\t#  Multi-line strings are implicitly treated by black as regular expressions\n\t\n\t[tool.pydocstyle]\n\t# Reference: http://www.pydocstyle.org/en/stable/error_codes.html\n\tconvention = \"numpy\"\n\tadd_select = [\n\t    \"D212\" # Multi-line docstring summary should start at the first line\n\t]\n\tadd-ignore = [\n\t    \"D105\", # Missing docstring in magic method\n\t    \"D102\", # Missing docstring in public method (needed for docstring inheritance)\n\t    \"D100\", # Missing docstring in public module\n\t    # Below are required to allow multi-line summaries.\n\t    \"D200\", # One-line docstring should fit on one line with quotes\n\t    \"D205\", # 1 blank line required between summary line and description\n\t    \"D400\", # First line should end with a period\n\t    # Properties shouldn't be written in imperative mode. This will be fixed\n\t    # post 6.1.1, see https://github.com/PyCQA/pydocstyle/pull/546\n\t    \"D401\",\n\t]\n\t\n\t[tool.isort]\n\tprofile = \"black\"\n\tline_length = 79\n\tknown_first_party = [\"example\", \"tests\"]\n\tskip = [\"docs/conf.py\"]\n\t\n\t[tool.pytest.ini_options]\n\tasyncio_mode = \"strict\"\n\tpython_files = [\n\t    \"tests/*.py\",\n\t    \"tests/*/*.py\"\n\t]\n\t\n\t[tool.mypy]\n\tdisallow_untyped_defs = true\n\tdisallow_incomplete_defs = true\n\tignore_missing_imports = true\n\tstrict_equality = true\n\twarn_redundant_casts = true\n\twarn_unreachable = true\n\twarn_unused_ignores = true\n\t# plugins =\n\nThis `pyproject.toml` is built for a \"src/\" Python package layout. The `[tool.setuptools.packages.find]` table is where we configure this.\n\n## setup.py is still necessary, for now\nOur original goal with this new template was to do away with the \"legacy\" packaging files: `setup.cfg` and `setup.py`. We did succeed in doing away with `setup.cfg` since not only has `setuptools` moved to `pyproject.toml`, but nearly every other tool using `setup.cfg` has moved their configurations as well.[^3]\n\nIt might seem like `setup.py` is also obsolete. However, in our experience, some projects still require it for editable installs `pip install -e .`. We often use editable installs during development to rapidly test and prototype, so this is a useful feature for us. For that reason, we've had to re-add a basic `setup.py` file to our projects:\n\n\tfrom setuptools import setup\n\t\n\tsetup()\n\nWhat's surprising is that, anecdotally, not all setuptools-based projects seem to need a `setup.py` for their editable installs.\n\nRegardless, [setuptools issue 2816](https://github.com/pypa/setuptools/issues/2816) is worth a subscription to learn when this has changed.\n\n## Concatenated READMEs with Markdown may not work\nWith the new `[project]` table in `pyproject.toml`, you can set a `readme` field that links to your project's README file. This effectively replaces the old \"long description\" field, where, back in the `setup.py` days, we'd write a small function to open and insert text from the README file. This is a nice, clean way of standardizing that practice.\n\nSomething I liked to do in our `setup.cfg` files was to actually concatenated multiple files into the long description:\n\n\t[metadata]\n\tname = documenteer\n\tlong_description = file: README.rst, CHANGELOG.rst, LICENSE\n\tlong_description_content_type = text/x-rst\n\nThis way, the project's page on PyPI would include not only the README but also the change log, followed by the license. Nice.\n\nIn `pyproject.toml`, the same can be accomplished by making the README *dynamic*:\n\n\t[project]\n\tdynamic = [\"readme\"]\n\t\n\t[tool.setuptools.dynamic]\n\treadme = {file = [\"README.rst\", \"CHANGELOG.rst\"]}\n\nAnd this works. Where things went wrong for me is using Markdown for the README and CHANGELOG:\n\n\t[project]\n\tdynamic = [\"readme\"]\n\t\n\t[tool.setuptools.dynamic]\n\treadme = {file = [\"README.md\", \"CHANGELOG.md\"]}\n\nWhen I looked inside the built wheel's `METADATA` file, the `Description-Content-Type` would be `text/re-structured-text` instead of `text/markdown`. Normally, the tooling successfully detects the content type for the description, but this may not be working for dynamic READMEs. Something to be aware of, as setuptools' `pyproject.toml` support is being developed.\n\n## Further reading\n\n- [PyPA's documentation for declaring project metadata in pyproject.toml](https://packaging.python.org/en/latest/specifications/declaring-project-metadata/)\n- [setuptools' documentation for pyproject.toml configuration](https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html)\n\n[^1]:\t[We love to create templates](https://github.com/lsst/templates) because they enable us to standardize on technologies and workflows. Even though we have tens/hundreds of GitHub repositories at Rubin (depending on the organizational scope), working in these projects is familiar because they all share the same structure and technologies.\n\n[^2]:\tLike distutils and packaging — remember thee?\n\n[^3]:\tExcept flake8 — so we've booted flake8 to its own `.flake8` configuration file.\n",
				"date_published": "2022-07-18T10:15:01-04:00",
				"url": "https://www.jonathansick.blog/2022/07/18/embracing-the-pyprojecttoml.html"
			},
			{
				"id": "http://jonathansick.micro.blog/2022/07/18/the-penetanguishene-outer.html",
				
				"content_html": "<p>The Penetanguishene outer harbour last night, dressed up in the setting light.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "The Penetanguishene outer harbour last night, dressed up in the setting light.\n\n<img src=\"uploads/2022/0209ca2e9b.jpg\" width=\"600\" height=\"450\" alt=\"\" />\n",
				"date_published": "2022-07-18T08:12:16-04:00",
				"url": "https://www.jonathansick.blog/2022/07/18/the-penetanguishene-outer.html"
			},
			{
				"id": "http://jonathansick.micro.blog/2022/07/14/onboarding-into-a.html",
				
				"content_html": "<p>Onboarding into a public cloud project: enter your email and credit card info (or have your team lead click an invite button).</p>\n<p>Onboarding into a gov &ldquo;cloud&rdquo; project: send us your detailed CV, passport scan, visa, and other personal info.</p>\n",
				"content_text": "Onboarding into a public cloud project: enter your email and credit card info (or have your team lead click an invite button).\r\n\r\nOnboarding into a gov \"cloud\" project: send us your detailed CV, passport scan, visa, and other personal info.\n",
				"date_published": "2022-07-14T12:05:38-04:00",
				"url": "https://www.jonathansick.blog/2022/07/14/onboarding-into-a.html"
			},
			{
				"id": "http://jonathansick.micro.blog/2022/07/13/finished-reading-the.html",
				
				"content_html": "<p>Finished reading: <a href=\"https://micro.blog/books/9780062910691\">The Cartographers: A Novel</a> by Peng Shepherd 📚</p>\n<p>I loved this book so much, and am glad I learned about it by chance from <a href=\"https://micro.blog/manton\">@manton</a>&rsquo;s feed. It&rsquo;s an academic thriller — what can I say! I won&rsquo;t think about maps the same again.</p>\n",
				"content_text": "Finished reading: [The Cartographers: A Novel](https://micro.blog/books/9780062910691) by Peng Shepherd 📚\n\nI loved this book so much, and am glad I learned about it by chance from [@manton](https://micro.blog/manton)'s feed. It's an academic thriller — what can I say! I won't think about maps the same again.\n",
				"date_published": "2022-07-13T21:17:06-04:00",
				"url": "https://www.jonathansick.blog/2022/07/13/finished-reading-the.html",
				"tags": ["Books"]
			},
			{
				"id": "http://jonathansick.micro.blog/2022/07/05/jira-can-be.html",
				
				"content_html": "<p>Jira can be rough compared to GitHub issues; but it’s the backbone of Rubin work tracking. I’ve discovered how to use @draftsapp for Mac/iPad/iOS to submit issues for me: it converts Markdown to Jira, creates the issue in my current epic, and then prepends a link to my draft 🥳</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Jira can be rough compared to GitHub issues; but it’s the backbone of Rubin work tracking. I’ve discovered how to use @draftsapp for Mac/iPad/iOS to submit issues for me: it converts Markdown to Jira, creates the issue in my current epic, and then prepends a link to my draft 🥳\n\n<img src=\"https://jonathansick.micro.blog/uploads/2022/1514705550.png\" width=\"600\" height=\"447\" alt=\"\" />\n",
				"date_published": "2022-07-05T10:58:20-04:00",
				"url": "https://www.jonathansick.blog/2022/07/05/jira-can-be.html"
			},
			{
				"id": "http://jonathansick.micro.blog/2021/08/02/ive-been-reading.html",
				
				"content_html": "<p>I’ve been reading <a href=\"https://www.cosmicpython.com\">Architecture Patterns with Python</a>. Every chapter they introduce a new issue, and I’m like “yes, that’s an architectural problem I’ve had in my code” and then they show to solve it. Highly approachable. I recommend it to anyone building applications or services.</p>\n",
				"content_text": "I’ve been reading [Architecture Patterns with Python](https://www.cosmicpython.com). Every chapter they introduce a new issue, and I’m like “yes, that’s an architectural problem I’ve had in my code” and then they show to solve it. Highly approachable. I recommend it to anyone building applications or services.\n",
				"date_published": "2021-08-02T13:42:43-04:00",
				"url": "https://www.jonathansick.blog/2021/08/02/ive-been-reading.html"
			},
			{
				"id": "http://jonathansick.micro.blog/2021/07/22/ive-been-using.html",
				
				"content_html": "<p>I&rsquo;ve been using Pydantic and FastAPI a lot lately and I&rsquo;m struck at their lack of API docs (compared to most Python package docs). Its as if these modern libraries are built for the era of IntelleSense and autocomplete to bring docs into the editor.</p>\n",
				"content_text": "I've been using Pydantic and FastAPI a lot lately and I'm struck at their lack of API docs (compared to most Python package docs). Its as if these modern libraries are built for the era of IntelleSense and autocomplete to bring docs into the editor.\n",
				"date_published": "2021-07-22T10:38:59-04:00",
				"url": "https://www.jonathansick.blog/2021/07/22/ive-been-using.html"
			},
			{
				"id": "http://jonathansick.micro.blog/2021/07/20/rethinking-the-social.html",
				"title": "Rethinking the social web in 2021",
				"content_html": "<p>Facebook was fantastic as a college kid: it was just an exclusive club for your an your dorm mates. Then everyone got on Facebook and the content became less and less relevant. Twitter was fantastic as a way to connect with techy astronomy colleagues. It felt like our own little back channel. Then Twitter became a political battle ground, and although the conversations were powerful, they were also overwhelming. Instagram was an oasis where there was no politics, just photos of your day. A way to connect with faraway friends. Now <a href=\"https://debugger.medium.com/instagram-has-become-skymall-68b9f2fbbc30\">Instagram has become Skymall</a>. Does the utility of all social media platforms self-implode at some point under the weight of growth and ad sales?</p>\n<p>I feel like I&rsquo;ve lost the tune with social media. I haven&rsquo;t used Facebook or kept up with my Twitter timeline in years. I keep feeling bad whenever I open Instagram. And that&rsquo;s fine. I have more time for meaningful work. But I also feel like I&rsquo;m disappearing off the face of the internet by no longer engaging with social media.</p>\n<p>So here we are in 2021. What should my social existence on the web look like?</p>\n<p>I&rsquo;m going to try going back to the basics. I&rsquo;m going to resolve to own my own corner of the web with <a href=\"https://jonathansick.ca\">jonathansick.ca</a> and no longer rent space from social media companies. I&rsquo;m also going to see how this micro.blog site fits in. I initially signed up in 2017. The concept of the indie web didn&rsquo;t fully connect with me back then, but now its clear that building my own site and paying directly for services and apps is the way that I want to exist on the web going forward.</p>\n",
				"content_text": "Facebook was fantastic as a college kid: it was just an exclusive club for your an your dorm mates. Then everyone got on Facebook and the content became less and less relevant. Twitter was fantastic as a way to connect with techy astronomy colleagues. It felt like our own little back channel. Then Twitter became a political battle ground, and although the conversations were powerful, they were also overwhelming. Instagram was an oasis where there was no politics, just photos of your day. A way to connect with faraway friends. Now [Instagram has become Skymall](https://debugger.medium.com/instagram-has-become-skymall-68b9f2fbbc30). Does the utility of all social media platforms self-implode at some point under the weight of growth and ad sales?\r\n\r\nI feel like I've lost the tune with social media. I haven't used Facebook or kept up with my Twitter timeline in years. I keep feeling bad whenever I open Instagram. And that's fine. I have more time for meaningful work. But I also feel like I'm disappearing off the face of the internet by no longer engaging with social media.\r\n\r\nSo here we are in 2021. What should my social existence on the web look like?\r\n\r\nI'm going to try going back to the basics. I'm going to resolve to own my own corner of the web with [jonathansick.ca](https://jonathansick.ca) and no longer rent space from social media companies. I'm also going to see how this micro.blog site fits in. I initially signed up in 2017. The concept of the indie web didn't fully connect with me back then, but now its clear that building my own site and paying directly for services and apps is the way that I want to exist on the web going forward.\n",
				"date_published": "2021-07-20T18:51:11-04:00",
				"url": "https://www.jonathansick.blog/2021/07/20/rethinking-the-social.html"
			}
	]
}
